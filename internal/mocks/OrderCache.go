// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	order "company.com/order-service/order"
	mock "github.com/stretchr/testify/mock"
)

// OrderCache is an autogenerated mock type for the OrderCache type
type OrderCache struct {
	mock.Mock
}

type OrderCache_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderCache) EXPECT() *OrderCache_Expecter {
	return &OrderCache_Expecter{mock: &_m.Mock}
}

// AddOrders provides a mock function with given fields: orders, orderSummaries
func (_m *OrderCache) AddOrders(orders []order.OrderCacheModel, orderSummaries map[string]order.OrderSummaryCacheModel) error {
	ret := _m.Called(orders, orderSummaries)

	if len(ret) == 0 {
		panic("no return value specified for AddOrders")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]order.OrderCacheModel, map[string]order.OrderSummaryCacheModel) error); ok {
		r0 = rf(orders, orderSummaries)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderCache_AddOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOrders'
type OrderCache_AddOrders_Call struct {
	*mock.Call
}

// AddOrders is a helper method to define mock.On call
//   - orders []order.OrderCacheModel
//   - orderSummaries map[string]order.OrderSummaryCacheModel
func (_e *OrderCache_Expecter) AddOrders(orders interface{}, orderSummaries interface{}) *OrderCache_AddOrders_Call {
	return &OrderCache_AddOrders_Call{Call: _e.mock.On("AddOrders", orders, orderSummaries)}
}

func (_c *OrderCache_AddOrders_Call) Run(run func(orders []order.OrderCacheModel, orderSummaries map[string]order.OrderSummaryCacheModel)) *OrderCache_AddOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]order.OrderCacheModel), args[1].(map[string]order.OrderSummaryCacheModel))
	})
	return _c
}

func (_c *OrderCache_AddOrders_Call) Return(_a0 error) *OrderCache_AddOrders_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderCache_AddOrders_Call) RunAndReturn(run func([]order.OrderCacheModel, map[string]order.OrderSummaryCacheModel) error) *OrderCache_AddOrders_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrders provides a mock function with no fields
func (_m *OrderCache) GetOrders() ([]order.Item, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOrders")
	}

	var r0 []order.Item
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]order.Item, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []order.Item); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]order.Item)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderCache_GetOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrders'
type OrderCache_GetOrders_Call struct {
	*mock.Call
}

// GetOrders is a helper method to define mock.On call
func (_e *OrderCache_Expecter) GetOrders() *OrderCache_GetOrders_Call {
	return &OrderCache_GetOrders_Call{Call: _e.mock.On("GetOrders")}
}

func (_c *OrderCache_GetOrders_Call) Run(run func()) *OrderCache_GetOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OrderCache_GetOrders_Call) Return(_a0 []order.Item, _a1 error) *OrderCache_GetOrders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderCache_GetOrders_Call) RunAndReturn(run func() ([]order.Item, error)) *OrderCache_GetOrders_Call {
	_c.Call.Return(run)
	return _c
}

// GetSummaries provides a mock function with no fields
func (_m *OrderCache) GetSummaries() ([]order.Summary, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSummaries")
	}

	var r0 []order.Summary
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]order.Summary, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []order.Summary); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]order.Summary)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderCache_GetSummaries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSummaries'
type OrderCache_GetSummaries_Call struct {
	*mock.Call
}

// GetSummaries is a helper method to define mock.On call
func (_e *OrderCache_Expecter) GetSummaries() *OrderCache_GetSummaries_Call {
	return &OrderCache_GetSummaries_Call{Call: _e.mock.On("GetSummaries")}
}

func (_c *OrderCache_GetSummaries_Call) Run(run func()) *OrderCache_GetSummaries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OrderCache_GetSummaries_Call) Return(_a0 []order.Summary, _a1 error) *OrderCache_GetSummaries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderCache_GetSummaries_Call) RunAndReturn(run func() ([]order.Summary, error)) *OrderCache_GetSummaries_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderCache creates a new instance of OrderCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderCache {
	mock := &OrderCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
