// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	order "company.com/order-service/order"
	mock "github.com/stretchr/testify/mock"
)

// OrderStore is an autogenerated mock type for the OrderStore type
type OrderStore struct {
	mock.Mock
}

type OrderStore_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderStore) EXPECT() *OrderStore_Expecter {
	return &OrderStore_Expecter{mock: &_m.Mock}
}

// AddOrders provides a mock function with given fields: ctx, orders
func (_m *OrderStore) AddOrders(ctx context.Context, orders []interface{}) error {
	ret := _m.Called(ctx, orders)

	if len(ret) == 0 {
		panic("no return value specified for AddOrders")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []interface{}) error); ok {
		r0 = rf(ctx, orders)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderStore_AddOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOrders'
type OrderStore_AddOrders_Call struct {
	*mock.Call
}

// AddOrders is a helper method to define mock.On call
//   - ctx context.Context
//   - orders []interface{}
func (_e *OrderStore_Expecter) AddOrders(ctx interface{}, orders interface{}) *OrderStore_AddOrders_Call {
	return &OrderStore_AddOrders_Call{Call: _e.mock.On("AddOrders", ctx, orders)}
}

func (_c *OrderStore_AddOrders_Call) Run(run func(ctx context.Context, orders []interface{})) *OrderStore_AddOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]interface{}))
	})
	return _c
}

func (_c *OrderStore_AddOrders_Call) Return(_a0 error) *OrderStore_AddOrders_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OrderStore_AddOrders_Call) RunAndReturn(run func(context.Context, []interface{}) error) *OrderStore_AddOrders_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrders provides a mock function with given fields: ctx, pageSize, pageNumber
func (_m *OrderStore) GetOrders(ctx context.Context, pageSize int, pageNumber int) ([]order.Item, error) {
	ret := _m.Called(ctx, pageSize, pageNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetOrders")
	}

	var r0 []order.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]order.Item, error)); ok {
		return rf(ctx, pageSize, pageNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []order.Item); ok {
		r0 = rf(ctx, pageSize, pageNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]order.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, pageSize, pageNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderStore_GetOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrders'
type OrderStore_GetOrders_Call struct {
	*mock.Call
}

// GetOrders is a helper method to define mock.On call
//   - ctx context.Context
//   - pageSize int
//   - pageNumber int
func (_e *OrderStore_Expecter) GetOrders(ctx interface{}, pageSize interface{}, pageNumber interface{}) *OrderStore_GetOrders_Call {
	return &OrderStore_GetOrders_Call{Call: _e.mock.On("GetOrders", ctx, pageSize, pageNumber)}
}

func (_c *OrderStore_GetOrders_Call) Run(run func(ctx context.Context, pageSize int, pageNumber int)) *OrderStore_GetOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *OrderStore_GetOrders_Call) Return(_a0 []order.Item, _a1 error) *OrderStore_GetOrders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderStore_GetOrders_Call) RunAndReturn(run func(context.Context, int, int) ([]order.Item, error)) *OrderStore_GetOrders_Call {
	_c.Call.Return(run)
	return _c
}

// GetSummaries provides a mock function with given fields: ctx, pageSize, pageNumber
func (_m *OrderStore) GetSummaries(ctx context.Context, pageSize int, pageNumber int) ([]order.Summary, error) {
	ret := _m.Called(ctx, pageSize, pageNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetSummaries")
	}

	var r0 []order.Summary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]order.Summary, error)); ok {
		return rf(ctx, pageSize, pageNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []order.Summary); ok {
		r0 = rf(ctx, pageSize, pageNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]order.Summary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, pageSize, pageNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderStore_GetSummaries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSummaries'
type OrderStore_GetSummaries_Call struct {
	*mock.Call
}

// GetSummaries is a helper method to define mock.On call
//   - ctx context.Context
//   - pageSize int
//   - pageNumber int
func (_e *OrderStore_Expecter) GetSummaries(ctx interface{}, pageSize interface{}, pageNumber interface{}) *OrderStore_GetSummaries_Call {
	return &OrderStore_GetSummaries_Call{Call: _e.mock.On("GetSummaries", ctx, pageSize, pageNumber)}
}

func (_c *OrderStore_GetSummaries_Call) Run(run func(ctx context.Context, pageSize int, pageNumber int)) *OrderStore_GetSummaries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *OrderStore_GetSummaries_Call) Return(_a0 []order.Summary, _a1 error) *OrderStore_GetSummaries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OrderStore_GetSummaries_Call) RunAndReturn(run func(context.Context, int, int) ([]order.Summary, error)) *OrderStore_GetSummaries_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrderStore creates a new instance of OrderStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderStore {
	mock := &OrderStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
